// firebase.js
// This file contains the common Firebase logic for most apps. 

// Note: Change this URL to match the project DB URL.
// databaseURL: "https://student-data-5d702-default-rtdb.asia-southeast1.firebasedatabase.app/"

// Note: Change the node to match the project ("studentData").
// const dbNodePath = ref(database, "studentData");

// Note: onValue() will trigger an exported function from ui.js onValUiTrigger(). Use this to process/render data after onValue() successfully runs.


// UI Trigger imported from ui.js
import { onValUiTrigger } from "./ui.js";

// Initial Settings
import { initializeApp } from "https://www.gstatic.com/firebasejs/11.7.1/firebase-app.js";
import { getDatabase, ref, push, onValue, set, get, child, update, remove } from "https://www.gstatic.com/firebasejs/11.7.1/firebase-database.js";
const appSettings = {
  databaseURL: "https://student-data-5d702-default-rtdb.asia-southeast1.firebasedatabase.app/"
};
const app = initializeApp(appSettings);
const database = getDatabase(app);
const dbNodePath = ref(database, "studentData"); // "studentData" is the primary/parent node. Change this to match the project.

// Everytime a change happens returns snapshot of the DB as data to the onValUiTrigger(data) in ui.js.
onValue(dbNodePath, (snapshot) => {
    if (snapshot.exists()) {
        //const let data = Object.values(snapshot.val()); // Convert object to array with values only
        //const let data = Object.keys(snapshot.val()); // Convert object to array with keys only
        // const data = snapshot.val(); // Just as an object
        const data = Object.entries(snapshot.val()); // Convert object to array of key-value pairs
        console.log("[onValue:]", data);
        onValUiTrigger(data); // Trigger UI function in ui.js with the fetched data
    } else {
        console.log("[onValue:] No data available.");
    }
});

// Adds a new parent level node to the DB with autogenerated key.
export function pushDataToDB(dataToPush) {
    push(dbNodePath, dataToPush);
}

// Update data at a specific node.
export function updatePropertyInDB(nodePath, dataToUpdate) {
    // Example nodePath: "studentData/-OQ-1thE-JC-Rgy9yT_W/education/ol"
    // Example dataToUpdate: { math: 100, sci: 200 }
    const updateRef = ref(database, nodePath);
    update(updateRef, dataToUpdate);
}

// Delete specified node.
export function deletePropertyInDB(nodePath) {
    // Example nodePath: "studentData/-OQ-1thE-JC-Rgy9yT_W"
    // Example nodePath: "studentData/-OQ-1thE-JC-Rgy9yT_W/education/ol"
    const deleteRef = ref(database, nodePath);
    remove(deleteRef);
}

// Get value once from a specified node.
export async function getValueOnce(nodePath) {
  const reference = child(dbNodePath, nodePath);
  try {
    const snapshot = await get(reference);
    if (snapshot.exists()) {
    //   const data = Object.entries(snapshot.val());
      const data = snapshot.val();
      console.log("getValueOnce() Data:", data);
      return data; // You can return the data if needed
    } else {
      console.log("getValueOnce() No data available at this location.");
      return null;
    }
  } catch (error) {
    console.error("getValueOnce() Error getting data:", error);
    return null;
  }
}
// Example usage:
// getValueOnce('-OQ00JQyARTpn1_6RiYt/education');
// getValueOnce('-OQ00JQyARTpn1_6RiYt/education/ol');
// getValueOnce('-OQ00JQyARTpn1_6RiYt/education/ol/math');






// *************************
// onValue() should be used as a trigger to get a snapshot of the database whenever a change happens. It shouldn't be used to get the database whenever needed. For that, use the get() method.
// export function getDB() {
//     return new Promise((resolve, reject) => {
//         onValue(dbNodePath, (snapshot) => {
//             if (snapshot.exists()) {
//                 const data = Object.entries(snapshot.val());
//                 console.log(`[onValue]`, data);
//                 resolve(data); // Resolve the promise with the fetched data
//             } else {
//                 console.log(`[onValue] No data available.`);
//                 resolve([]); // Resolve with an empty array if no data
//             }
//         }, (error) => {
//             console.error(`[onValue] Error fetching data:`, error);
//             reject(error); // Reject the promise if there's an error
//         });
//     });
// }
// console.log("Test:", getDB());
// *************************


// ************************
// // This function is not used in the current code, but it can be used to get data from the database. It works but can't use because of async/await won't return the data.
// export function getDB() {
    //     onValue(dbNodePath, (snapshot) => {
        //         if (snapshot.exists()) {
            //             //const let data = Object.values(snapshot.val()); // Convert object to array with values only
            //             //const let data = Object.keys(snapshot.val()); // Convert object to array with keys only
            //             let data = Object.entries(snapshot.val()); // Convert object to array of key-value pairs
            //             console.log("[onValue:]", data);
            //             return data;
            //         }
            //         else {
                //             console.log("[onValue:] No data available.");
//         }
//     });
// }
// getDB();
// ************************
